"""
Django settings for arbitrator project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-lwd_w04h*n258^29#xvaj6d-v6@3x89n5vit0%u30xpr=(34js'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',###
    'api',###
    'corsheaders',###https://pypi.org/project/django-cors-headers/
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "corsheaders.middleware.CorsMiddleware",###
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'arbitrator.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'arbitrator.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

### BELOW LINES ARE ADDED BY ME 
    ###__________LOCAL_DJANGO_________(https://medium.com/django-unleashed/working-and-configuring-media-files-in-django-0c2fa7b97a1e)
    
MEDIA_URL = '/media/'
MEDIA_ROOT =  BASE_DIR / 'media'

USE_MINIO=True # most important line


###__________CORSHEADERS_________(https://pypi.org/project/django-cors-headers/)
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
]
# CORS_ORIGIN_ALLOW_ALL = True


###__________MINIO_________(https://pypi.org/project/django-minio-backend/)
if USE_MINIO:
    INSTALLED_APPS.append('django_minio_backend')###https://pypi.org/project/django-minio-backend/
    # if you remove above line,inspite of running minio server,it will not work
    DEFAULT_FILE_STORAGE = 'django_minio_backend.models.MinioBackend'
    from typing import List, Tuple
    STORAGES = {  # -- ADDED IN Django 5.1
        "default": {
            "BACKEND": "django_minio_backend.models.MinioBackend",
        },
        "staticfiles": {  # -- ADD THESE LINES FOR STATIC FILES SUPPORT
            "BACKEND": "django_minio_backend.models.MinioBackendStatic", # python manage.py collectstatic for DRF
        },
    }

    MINIO_ENDPOINT = '127.0.0.1:9000' #Docker running at
    MINIO_ACCESS_KEY = 'minioadmin' #My MINIO username
    MINIO_SECRET_KEY = 'minioadmin' #My MINIO password 

    MINIO_PUBLIC_BUCKETS = ['media','static'] #Buckets for media and static files
    MINIO_MEDIA_FILES_BUCKET = 'media'  # replacement for MEDIA_ROOT
    MINIO_STATIC_FILES_BUCKET = 'static'  # replacement for STATIC_ROOT
    MINIO_POLICY_HOOKS: List[Tuple[str, dict]] = []

    MINIO_USE_HTTPS=False #Mandatiry parameter
    MINIO_BUCKET_CHECK_ON_SAVE = True  # Default: Autocreates bucket if not present
    MINIO_CONSISTENCY_CHECK_ON_START = True #Health & consistency check

